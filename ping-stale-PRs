#!/usr/bin/env bash

GITHUB_TOKEN=${GITHUB_TOKEN:-}
OWNER=${OWNER:-}
REPO=${REPO:-}
STALE_DAYS=${STALE_DAYS:-14}
CURL="eval curl --silent -H 'Authorization: token ${GITHUB_TOKEN}'"
COMMENT='{"body": "Any updates here? Thanks!"}'
DEPENDENCIES="curl grep awk sed jq xargs date"
DATE_PARA='+%s -d'
START="$(date +%s)"

if [ "$(uname)" = "Darwin" ] || [ "$(uname)" = "FreeBSD" ]; then
    DATE_PARA='-j -f %Y-%m-%dT%H:%M:%SZ +%s'
fi

err() { >&2 echo -e "\e[1;31m$@\e[m"; ping-count; exit 1; }

ping-count() {
    echo "Pinged ${COUNT:-0} pull requests in $(( $(date +%s) - START )) sec(s)!"
}

for DEP in ${DEPENDENCIES}
do
    if ! type "${DEP}" &> /dev/null; then
        err "Dependency - ${DEP} not found!!!"
    fi
done

if [ -z "$REPO" ];  then err "REPO not set!"; fi
if [ -z "$OWNER" ]; then err "repo OWNER not set!"; fi
if [ -z "$GITHUB_TOKEN" ]; then err "GITHUB_TOKEN not set!"; fi

if ! [[ $STALE_DAYS =~ ^-?[0-9]+$ ]] || [ $((STALE_DAYS/1)) -ne $STALE_DAYS ] || [ $STALE_DAYS -lt 0 ]; then
    err "STALE_DAYS needs to be a natural number! (Integer and greater than 0)"
fi

if ! ${CURL} -I "https://api.github.com/" -f &> /dev/null; then
    err "$(${CURL} 'https://api.github.com/' | jq .message -r) - Authentication failed!"
fi

NOW="$(date +%s)"
COUNT=0
PAGE=1
PAGES="$(${CURL} -I "https://api.github.com/repos/${OWNER}/${REPO}/pulls" | grep ^Link | awk -F',' '{print $2}' | sed -e 's/^.*?page=//g' -e 's/>.*$//g')"

if ! ${CURL} -I "https://api.github.com/users/${OWNER}" -f &> /dev/null; then
    err "Invalid repo owner - ${OWNER} $(${CURL} "https://api.github.com/users/${OWNER}" | jq .message -r)"
elif ! ${CURL} -I "https://api.github.com/repos/${OWNER}/${REPO}" -f &> /dev/null; then
    err "Invalid repository - ${REPO} $(${CURL} "https://api.github.com/repos/${OWNER}/${REPO}" | jq .message -r)"
fi

if ! ${CURL} -I "https://api.github.com/repos/${OWNER}/${REPO}/pulls" -f &> /dev/null || [ -z "${PAGES}" ]; then
    err "Pull request list fetching failed ..."
fi

echo "Found $PAGES PR pages ..."
while [ "${PAGE}" -le "${PAGES}" ]
do
    echo "Now on page ${PAGE} ..."
    for PR in $(${CURL} -o- "https://api.github.com/repos/${OWNER}/${REPO}/pulls?sort=updated&direction=asc&page=${PAGE}" | jq ' .[] | .number')
    do
        updated="$(${CURL} -o- "https://api.github.com/repos/${OWNER}/${REPO}/issues/${PR}" | jq -r .updated_at | xargs date ${DATE_PARA} )"
        if [ $((NOW - updated)) -gt $((86400 * ${STALE_DAYS})) ]; then
            echo "${PR} stales more than ${STALE_DAYS} days ($(( ( NOW - updated ) / 86400 ))) ... ping the PR now!"
            if ! ${CURL} -d "'$COMMENT'" "https://api.github.com/repos/${OWNER}/${REPO}/issues/${PR}/comments" > /dev/null; then
                err "Ping PR ${PR} failed ..."
            fi
            COUNT=$((COUNT+1))
        else
            echo "The currently oldest PR ${PR} only stales $(( (NOW - updated) / 86400)) days, not exceed ${STALE_DAYS} days, exit now!"
            ping-count
            exit 0
        fi
    done
    PAGE=$((PAGE+1))
done
